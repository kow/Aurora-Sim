[PacketPool]
    ;; Enables the experimental packet pool. Yes, we've been here before.
    ;RecyclePackets = true;
    ;RecycleDataBlocks = true;

[InterestManagement]
    ;; This section controls how updates for prims and avatars are sent to the client
    
    ;;
    ;; Prioritizer section
    ;;
    
    ;; Valid values are:
    ;; Time - First come, first out
    ;; Distance - Sends closer objects first
    ;; SimpleAngularDistance - Not Available
    ;; FrontBack - What is in front is first
    ;; BestAvatarResponsiveness - Checks the update for closer objects, in front of the avatar, whether the avatar is sitting on objects, child agents, etc. Recommended to use this option.
    ;; OOB - Based on the object bounding boxes and distance
    ;; Default is BestAvatarResponsiveness
    UpdatePrioritizationScheme = BestAvatarResponsiveness
    ;; Distance child agent cameras have to move before updates are reprioritized
    ChildReprioritizationDistance = 20.0
    
    ;;
    ;; Culling section
    ;;
    
    ;; Should we only send the updates that clients can see (based on their draw distance)?
    ;; EXTREMELY NOT RECOMMENDED to disable!
    ;; Default: true
    UseCulling = true;
    
    ;; Culling based on distance
    ;; Default: true
    UseDistanceBasedCulling = true;

[ObjectCache]
    ;; This helps reduce bandwith by sending cached updates to the client
    ;; EXTREMELY NOT RECOMMENDED to disable!
    ;; Default: ObjectCacheModule
    Module = ObjectCacheModule

[ClientStack.LindenUDP]
    ;; Set this to true to process incoming packets asyncronously. This can speed up the queue, but can also cause deadlocks, so watch out.
    ;; Default is true
    async_packet_handling = true

    ;; The client socket receive buffer size determines how many
    ;; incoming requests we can process; the default on .NET is 8192
    ;; which is about 2 4k-sized UDP datagrams. On mono this is
    ;; whatever the underlying operating system has as default; for
    ;; example, ubuntu 8.04 or SLES11 have about 111k, which is about
    ;; 27 4k-sized UDP datagrams (on linux platforms you can [as root]
    ;; do "sysctl net.core.rmem_default" to find out what your system
    ;; uses a default socket receive buffer size.
    ;;
    ;; client_socket_rcvbuf_size allows you to specify the receive
    ;; buffer size LLUDPServer should use. NOTE: this will be limited
    ;; by the system's settings for the maximum client receive buffer
    ;; size (on linux systems you can set that with "sysctl -w
    ;; net.core.rmem_max=X")
    ;;
    ;client_socket_rcvbuf_size = 8388608

    ;; Maximum outbound bytes per second for a single scene. This can be used to
    ;; throttle total outbound UDP traffic for a simulator. The default value is
    ;; 0, meaning no throttling at the scene level. The example given here is
    ;; 20 megabits
    ;scene_throttle_max_bps = 2621440

    ;; Maximum bits per second to send to any single client. This will override
    ;; the user's viewer preference settings. The default value is 0, meaning no
    ;; aggregate throttling on clients (only per-category throttling). The
    ;; example given here is 1.5 megabits
    ;;
    ;client_throttle_max_bps = 196608

    ;; Per-client bytes per second rates for the various throttle categories.
    ;; These are default values that will be overriden by clients
    ;;
    ;resend_default = 12500
    ;land_default = 1000
    ;wind_default = 1000
    ;cloud_default = 1000
    ;task_default = 1000
    ;texture_default = 1000
    ;asset_default = 1000
    ;state_default = 1000

    ;; Per-client maximum burst rates in bytes per second for the various
    ;; throttle categories. These are default values that will be overriden by
    ;; clients
    ;;
    ;resend_limit = 18750
    ;land_limit = 29750
    ;wind_limit = 18750
    ;cloud_limit = 18750
    ;task_limit = 18750
    ;texture_limit = 55750
    ;asset_limit = 27500
    ;state_limit = 37000

    ;; TextureSendLimit determines how many packets will be put on
    ;; the outgoing queue each cycle. Like the settings above, this
    ;; is a balance between responsiveness to priority updates and
    ;; total throughput. Higher numbers will give a better
    ;; throughput at the cost of reduced responsiveness to client
    ;; priority changes or transfer aborts
    ;;
    ;TextureSendLimit = 20

    ;; Time before the client is disconnected because of inactivity (in seconds)
    ;; Default is 60
    ClientTimeOut = 500;

    ;; Quash and remove any light properties from attachments not on the
    ;; hands. This allows flashlights and lanterns to function, but kills
    ;; silly vanity "Facelights" dead. Sorry, head mounted miner's lamps
    ;; will also be affected.
    ;;
    ;DisableFacelights = "false"

[ImageDecoding]
    ;; Use CSJ2K for layer boundary decoding if true, OpenJPEG is used if false
    ;; Default is false
    UseCSJ2K = false

    ;; Use the J2K cache to store decoded textures
    ;; NOT RECOMMENDED TO DISABLE
    UseJ2KCache = true;

[System]
    ;; Sets the method that OpenSim will use to fire asynchronous events. Valid values are:
    ;; UnsafeQueueUserWorkItem, QueueUserWorkItem, BeginInvoke, SmartThreadPool, Await, and Thread.
    ;; Await ONLY works on .net 4 with the Async CTP add on
    ;; SmartThreadPool is reported to work well on Mono/Linux
    ;; Defaults to SmartThreadPool  (SAFE for ALL PLATFORMS)
    AsyncCallMethod = SmartThreadPool

    ;; This next config option only applies if you selected SmartThreadPool from above
    ;;
    ;; Max threads to allocate on the FireAndForget thread pool
    ;; when running with the SmartThreadPool option above
    ;; This defaults to 15, but this is a misleading default as it depends on your machine, real recommended are as follows
    ;; Single Core, 15
    ;; Dual Core, 30
    ;; Quad Core, 45
    MaxPoolThreads = 15

[SSLConfig]
    ;; ssl config: Experimental!
    ;; The auto https config only really works definately on windows XP now.
    ;;You need a Cert Request/Signed pair installed in the MY store with the CN specified below.
    ;;You can use https on other platforms, but you'll need to configure the httpapi yourself for now.
    http_listener_ssl = false ; Also create a SSL server
    http_listener_cn = localhost ; Use the cert with the common name
    http_listener_sslport = 9001 ; Use this port for SSL connections
    http_listener_ssl_cert = "" ; Currently unused, but will be used for OSHttpServer

[MediaOnAPrim]
    ;; Enable media on a prim facilities
    Enabled = true
